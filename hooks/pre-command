#!/bin/bash

# Pre-command hook for terraform plugin
# Performs an assume role using credator god creds

set -ueo pipefail

function _cleanup() {
  rm -f .assumed-role.json
  if [[ -n "${BUILDKITE}" ]]; then
    rm -rf tmp/
  fi
}

trap _cleanup EXIT

BUILDKITE="${BUILDKITE:-}"

RED='\033[0;31m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m'

# Process plugin parameters
delegate_account_id="${BUILDKITE_PLUGIN_TERRAFORM_DELEGATE_ACCOUNT_ID}"
delegate_role="${BUILDKITE_PLUGIN_TERRAFORM_DELEGATE_ROLE}"
session_duration_seconds="${BUILDKITE_PLUGIN_TERRAFORM_DELEGATE_SESSION_DURATION:-3600}"
delegate_role_arn="arn:aws:iam::${delegate_account_id}:role/${delegate_role}"

# Give this a meaningful session name so we can track stuff
session_name="buildkite-${BUILDKITE_PIPELINE_SLUG}-${BUILDKITE_BUILD_NUMBER}"

# initialize global vars
PERMISSIONS=""


#####  TF PLAN Scoped #####
if [[ "${BUILDKITE_COMMAND}" == "tf_plan" ]]; then
  echo "Checking if the specified account is available to the repo owning team."

  # fetch mappings from s3 only when running on agent for access policy reasons
  if [[ -n "${BUILDKITE}" ]]; then
    echo getting repo to delegate roles mappings from s3
    sudo mkdir tmp
    aws s3 cp s3://buildkite-terraform-test-resources/team_account_mappings.json tmp/
    PERMISSIONS=($(cat tmp/team_account_mappings.json | jq -r ".[\"${BUILDKITE_PLUGIN_TERRAFORM_DELEGATE_ACCOUNT_ID}\"]" | tr "," "\n" ))
  else
    # assume mapping is in local directory
    echo getting repo to delegate roles mappings from local directory
    PERMISSIONS=($(cat tests/stubs/team_account_mappings.json | jq -r ".[\"${BUILDKITE_PLUGIN_TERRAFORM_DELEGATE_ACCOUNT_ID}\"]" | tr "," "\n" ))
  fi

  echo "___ : Buildkite creator team permissions check..."
  if [[ ":$BUILDKITE_BUILD_CREATOR_TEAMS:" != *":everyone:"* ]]; then

    echo "BUILDKITE_BUILD_CREATOR_TEAMS = $BUILDKITE_BUILD_CREATOR_TEAMS "
    echo "ARN '"$BUILDKITE_PLUGIN_TERRAFORM_DELEGATE_ACCOUNT_ID"' with permissions "${PERMISSIONS[*]}

    PERMISSION_GIVEN=false
    for i in ${PERMISSIONS[@]}; do
      if [[ $i == \"$BUILDKITE_BUILD_CREATOR_TEAMS\" ]]; then
        echo "Permission scoped for "$i;
        PERMISSION_GIVEN=true
      fi
      # echo "$i";
    done

    if [[ "$PERMISSION_GIVEN" = true ]]; then
      echo "${GREEN}Permission scoped to user. Yay."
    else
      echo "${RED}Permission not scoped to user. :( "
      exit 1
    fi

  else
    echo "${GREEN}Permission scoped to everyone. Yay."
  fi

fi


#####  TF APPLY Scoped #####
if [[ "${BUILDKITE_COMMAND}" == "tf_apply" ]]; then
  echo "Checking if the pull request has been approved by a user with prod access."
  # use github API /status to check if the PR has passed all checks, assuming one of these will be a prod-appoval check
fi


if [[ -n "${BUILDKITE}" ]]; then

  # Assume the delegate role
  aws sts assume-role \
  --role-arn "${delegate_role_arn}" \
  --role-session-name "${session_name}" \
  --duration-seconds $session_duration_seconds > .assumed-role.json


  # Export aws env vars from the assumed session - available
  export AWS_ACCESS_KEY_ID=$(cat .assumed-role.json | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(cat .assumed-role.json | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(cat .assumed-role.json | jq -r '.Credentials.SessionToken')
  rm -f .assumed-role.json

  export AWS_ACCOUNT_ID="${delegate_account_id}"
  export AWS_ROLE="${delegate_role}"

  echo -e "${GREEN}Successfully assumed role ${delegate_role_arn}${NC}"
fi

